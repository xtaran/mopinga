#!/usr/bin/perl

# Copyright (C) 2021, Axel Beckert <abe@deuxchevaux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see https://www.gnu.org/licenses/.

use strict;
use warnings;
use v5.10;

our $VERSION = '1.1.0';

use Regexp::Common qw(net);
use Net::DNS;

my @to_ping;
my @options;

my $resolver = Net::DNS::Resolver->new();

while (my $param = shift) {
    if ($param =~ /^-/) {
        push(@options, $param);
        # Options with parameters
        if ($param =~ /^-[ciwtIBOQmgHPZ]$/) {
            push(@options, shift);
        }

        # Options which make no sense in this script
        if ($param =~ /^-[46]$/) {
            die "Options -4 and -6 are orthogonal to what this script tries to accomplish."
        }

        # Options which are not yet supported in this script
        if ($param =~ /^-f$/) {
            die "Option -f is not yet supported by this script."
        }
    }

    if ($param =~ /^($RE{net}{IPv4}|$RE{net}{IPv6})$/) {
        push(@to_ping, $param);
        next;
    }

    push(@to_ping, get_ip_addresses($param));
}

if (@to_ping) {
    # Debug stuff
    #say join("\n", @to_ping);
    exec('noping', @options, @to_ping);
} else {
    die "\n".
        "$0: Either no hosts given or none of the given hosts resolves.\n".
        "$0: Exiting.\n";
}

sub get_ip_addresses {
    my $hostname = shift;
    my @ip_addresses = ();
    my %pkt = ();

    foreach my $rr_type (qw(A AAAA)) {
        $pkt{$rr_type} = $resolver->search($hostname, $rr_type);

        if ($pkt{$rr_type}) {
            my @rr = $pkt{$rr_type}->answer();
            if (@rr) {
                foreach my $response (@rr) {
                    # Check for CNAMEs first, they need another round
                    # of DNS resolution.
                    if ($response->type eq 'CNAME') {
                        push(@ip_addresses,
                             get_ip_addresses($response->cname));
                    }
                    # Else it should be of the expected record type
                    # for which we asked for.
                    elsif ($response->type eq $rr_type) {
                        push(@ip_addresses, $response->address());
                    }

                    else {
                        die "$0: ASSERTION FAILED: RR type ".
                            $response->type.
                            " is neither CNAME nor $rr_type.";
                    }
                }
            }
        }
    }

    if (!$pkt{'A'} and !$pkt{'AAAA'}) {
        warn "$0: Parameter \"$hostname\" does not resolve at all. Skipping.\n";
    }

    return @ip_addresses;
}
